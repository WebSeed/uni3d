'use strict';

var _regl = require('regl');

var _regl2 = _interopRequireDefault(_regl);

var _loadResources = require('./load-resources');

var _loadResources2 = _interopRequireDefault(_loadResources);

var _camera = require('./camera');

var _camera2 = _interopRequireDefault(_camera);

var _drawCommon = require('./draw-common');

var _drawCommon2 = _interopRequireDefault(_drawCommon);

var _drawBackground = require('./draw-background');

var _drawBackground2 = _interopRequireDefault(_drawBackground);

var _drawBunny = require('./draw-bunny');

var _drawBunny2 = _interopRequireDefault(_drawBunny);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var regl = (0, _regl2.default)({
  attributes: {
    preserveDrawingBuffer: true
  }
});
var camera = (0, _camera2.default)(regl);
var drawCommon = (0, _drawCommon2.default)(regl);
var drawBackground = (0, _drawBackground2.default)(regl);
var drawBunny = (0, _drawBunny2.default)(regl);

function openSocket(url) {
  return new Promise(function (resolve, reject) {
    var socket = new WebSocket(url);
    socket.onopen = resolve;
    socket.onerror = reject;
  });
}

function handleMessages(socket) {
  socket.onmessage = function (message, flags) {
    console.log('Received message', message, flags);
  };
  return socket;
}

function load() {
  return (0, _loadResources2.default)(regl);
}

function draw(cube) {
  // regl.frame(({ tick }) => {
  var tick = 0;
  camera(function (_ref) {
    var drawingBufferWidth = _ref.drawingBufferWidth;
    var drawingBufferHeight = _ref.drawingBufferHeight;

    drawCommon({ cube: cube, tick: tick }, function () {
      drawBackground();
      drawBunny();
      var pixels = regl.read();
      console.log(pixels.length);
      console.log(drawingBufferWidth, drawingBufferHeight);
      // request
    });
  });
  // })
}

openSocket('ws://localhost:8080').then(handleMessages).then(load).then(draw).catch(console.error);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW5kZXJlci5qcyJdLCJuYW1lcyI6WyJyZWdsIiwiYXR0cmlidXRlcyIsInByZXNlcnZlRHJhd2luZ0J1ZmZlciIsImNhbWVyYSIsImRyYXdDb21tb24iLCJkcmF3QmFja2dyb3VuZCIsImRyYXdCdW5ueSIsIm9wZW5Tb2NrZXQiLCJ1cmwiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInNvY2tldCIsIldlYlNvY2tldCIsIm9ub3BlbiIsIm9uZXJyb3IiLCJoYW5kbGVNZXNzYWdlcyIsIm9ubWVzc2FnZSIsIm1lc3NhZ2UiLCJmbGFncyIsImNvbnNvbGUiLCJsb2ciLCJsb2FkIiwiZHJhdyIsImN1YmUiLCJ0aWNrIiwiZHJhd2luZ0J1ZmZlcldpZHRoIiwiZHJhd2luZ0J1ZmZlckhlaWdodCIsInBpeGVscyIsInJlYWQiLCJsZW5ndGgiLCJ0aGVuIiwiY2F0Y2giLCJlcnJvciJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBLElBQU1BLE9BQU8sb0JBQVc7QUFDdEJDLGNBQVk7QUFDVkMsMkJBQXVCO0FBRGI7QUFEVSxDQUFYLENBQWI7QUFLQSxJQUFNQyxTQUFTLHNCQUFhSCxJQUFiLENBQWY7QUFDQSxJQUFNSSxhQUFhLDBCQUFpQkosSUFBakIsQ0FBbkI7QUFDQSxJQUFNSyxpQkFBaUIsOEJBQXFCTCxJQUFyQixDQUF2QjtBQUNBLElBQU1NLFlBQVkseUJBQWdCTixJQUFoQixDQUFsQjs7QUFFQSxTQUFTTyxVQUFULENBQXFCQyxHQUFyQixFQUEwQjtBQUN4QixTQUFPLElBQUlDLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVVDLE1BQVYsRUFBcUI7QUFDdEMsUUFBTUMsU0FBUyxJQUFJQyxTQUFKLENBQWNMLEdBQWQsQ0FBZjtBQUNBSSxXQUFPRSxNQUFQLEdBQWdCSixPQUFoQjtBQUNBRSxXQUFPRyxPQUFQLEdBQWlCSixNQUFqQjtBQUNELEdBSk0sQ0FBUDtBQUtEOztBQUVELFNBQVNLLGNBQVQsQ0FBeUJKLE1BQXpCLEVBQWlDO0FBQy9CQSxTQUFPSyxTQUFQLEdBQW1CLFVBQVVDLE9BQVYsRUFBbUJDLEtBQW5CLEVBQTBCO0FBQzNDQyxZQUFRQyxHQUFSLENBQVksa0JBQVosRUFBZ0NILE9BQWhDLEVBQXlDQyxLQUF6QztBQUNELEdBRkQ7QUFHQSxTQUFPUCxNQUFQO0FBQ0Q7O0FBRUQsU0FBU1UsSUFBVCxHQUFpQjtBQUNmLFNBQU8sNkJBQWN0QixJQUFkLENBQVA7QUFDRDs7QUFFRCxTQUFTdUIsSUFBVCxDQUFlQyxJQUFmLEVBQXFCO0FBQ25CO0FBQ0EsTUFBSUMsT0FBTyxDQUFYO0FBQ0F0QixTQUFPLGdCQUFpRDtBQUFBLFFBQTlDdUIsa0JBQThDLFFBQTlDQSxrQkFBOEM7QUFBQSxRQUExQkMsbUJBQTBCLFFBQTFCQSxtQkFBMEI7O0FBQ3REdkIsZUFBVyxFQUFFb0IsVUFBRixFQUFRQyxVQUFSLEVBQVgsRUFBMkIsWUFBTTtBQUMvQnBCO0FBQ0FDO0FBQ0EsVUFBTXNCLFNBQVM1QixLQUFLNkIsSUFBTCxFQUFmO0FBQ0FULGNBQVFDLEdBQVIsQ0FBWU8sT0FBT0UsTUFBbkI7QUFDQVYsY0FBUUMsR0FBUixDQUFZSyxrQkFBWixFQUFnQ0MsbUJBQWhDO0FBQ0E7QUFDRCxLQVBEO0FBUUQsR0FURDtBQVVBO0FBQ0Q7O0FBRURwQixXQUFXLHFCQUFYLEVBQ0d3QixJQURILENBQ1FmLGNBRFIsRUFFR2UsSUFGSCxDQUVRVCxJQUZSLEVBR0dTLElBSEgsQ0FHUVIsSUFIUixFQUlHUyxLQUpILENBSVNaLFFBQVFhLEtBSmpCIiwiZmlsZSI6InJlbmRlcmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZVJFR0wgZnJvbSAncmVnbCdcbmltcG9ydCBsb2FkUmVzb3VyY2VzIGZyb20gJy4vbG9hZC1yZXNvdXJjZXMnXG5pbXBvcnQgY3JlYXRlQ2FtZXJhIGZyb20gJy4vY2FtZXJhJ1xuaW1wb3J0IGNyZWF0ZURyYXdDb21tb24gZnJvbSAnLi9kcmF3LWNvbW1vbidcbmltcG9ydCBjcmVhdGVEcmF3QmFja2dyb3VuZCBmcm9tICcuL2RyYXctYmFja2dyb3VuZCdcbmltcG9ydCBjcmVhdGVEcmF3QnVubnkgZnJvbSAnLi9kcmF3LWJ1bm55J1xuXG5jb25zdCByZWdsID0gY3JlYXRlUkVHTCh7XG4gIGF0dHJpYnV0ZXM6IHtcbiAgICBwcmVzZXJ2ZURyYXdpbmdCdWZmZXI6IHRydWVcbiAgfVxufSlcbmNvbnN0IGNhbWVyYSA9IGNyZWF0ZUNhbWVyYShyZWdsKVxuY29uc3QgZHJhd0NvbW1vbiA9IGNyZWF0ZURyYXdDb21tb24ocmVnbClcbmNvbnN0IGRyYXdCYWNrZ3JvdW5kID0gY3JlYXRlRHJhd0JhY2tncm91bmQocmVnbClcbmNvbnN0IGRyYXdCdW5ueSA9IGNyZWF0ZURyYXdCdW5ueShyZWdsKVxuXG5mdW5jdGlvbiBvcGVuU29ja2V0ICh1cmwpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBzb2NrZXQgPSBuZXcgV2ViU29ja2V0KHVybClcbiAgICBzb2NrZXQub25vcGVuID0gcmVzb2x2ZVxuICAgIHNvY2tldC5vbmVycm9yID0gcmVqZWN0XG4gIH0pXG59XG5cbmZ1bmN0aW9uIGhhbmRsZU1lc3NhZ2VzIChzb2NrZXQpIHtcbiAgc29ja2V0Lm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlLCBmbGFncykge1xuICAgIGNvbnNvbGUubG9nKCdSZWNlaXZlZCBtZXNzYWdlJywgbWVzc2FnZSwgZmxhZ3MpXG4gIH1cbiAgcmV0dXJuIHNvY2tldFxufVxuXG5mdW5jdGlvbiBsb2FkICgpIHtcbiAgcmV0dXJuIGxvYWRSZXNvdXJjZXMocmVnbClcbn1cblxuZnVuY3Rpb24gZHJhdyAoY3ViZSkge1xuICAvLyByZWdsLmZyYW1lKCh7IHRpY2sgfSkgPT4ge1xuICBsZXQgdGljayA9IDBcbiAgY2FtZXJhKCh7IGRyYXdpbmdCdWZmZXJXaWR0aCwgZHJhd2luZ0J1ZmZlckhlaWdodCB9KSA9PiB7XG4gICAgZHJhd0NvbW1vbih7IGN1YmUsIHRpY2sgfSwgKCkgPT4ge1xuICAgICAgZHJhd0JhY2tncm91bmQoKVxuICAgICAgZHJhd0J1bm55KClcbiAgICAgIGNvbnN0IHBpeGVscyA9IHJlZ2wucmVhZCgpXG4gICAgICBjb25zb2xlLmxvZyhwaXhlbHMubGVuZ3RoKVxuICAgICAgY29uc29sZS5sb2coZHJhd2luZ0J1ZmZlcldpZHRoLCBkcmF3aW5nQnVmZmVySGVpZ2h0KVxuICAgICAgLy8gcmVxdWVzdFxuICAgIH0pXG4gIH0pXG4gIC8vIH0pXG59XG5cbm9wZW5Tb2NrZXQoJ3dzOi8vbG9jYWxob3N0OjgwODAnKVxuICAudGhlbihoYW5kbGVNZXNzYWdlcylcbiAgLnRoZW4obG9hZClcbiAgLnRoZW4oZHJhdylcbiAgLmNhdGNoKGNvbnNvbGUuZXJyb3IpXG4iXX0=