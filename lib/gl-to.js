'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toJpeg = exports.toPng = exports.toImageData = exports.toRgba = undefined;

var _pngjs = require('pngjs');

var _pngjs2 = _interopRequireDefault(_pngjs);

var _jpegTurbo = require('jpeg-turbo');

var _jpegTurbo2 = _interopRequireDefault(_jpegTurbo);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PNG = _pngjs2.default.PNG;

function imageDataToPng(imageData) {
  var width = imageData.width;
  var height = imageData.height;
  var pixels = imageData.data;
  var png = new PNG({ width: width, height: height });
  for (var i = 0; i < pixels.length; i += 1) {
    png.data[i] = pixels[i];
  }
  return PNG.sync.write(png);
}

function toRgba(gl, width, height) {
  var data = null;
  return function () {
    if (!data) {
      data = new Uint8Array(4 * width * height);
    }
    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, data);
    return data;
  };
}

function toImageData(gl, width, height) {
  var data = toRgba(gl, width, height);
  return {
    data: data,
    width: width,
    height: height
  };
}

function toPng(gl, width, height) {
  return imageDataToPng(toImageData(gl, width, height));
}

function toJpeg(pixels, width, height) {
  return _jpegTurbo2.default.compressSync(pixels, {
    format: _jpegTurbo2.default.FORMAT_RGBA,
    width: width,
    height: height,
    quality: 95
  });
}

exports.toRgba = toRgba;
exports.toImageData = toImageData;
exports.toPng = toPng;
exports.toJpeg = toJpeg;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9nbC10by5qcyJdLCJuYW1lcyI6WyJQTkciLCJpbWFnZURhdGFUb1BuZyIsImltYWdlRGF0YSIsIndpZHRoIiwiaGVpZ2h0IiwicGl4ZWxzIiwiZGF0YSIsInBuZyIsImkiLCJsZW5ndGgiLCJzeW5jIiwid3JpdGUiLCJ0b1JnYmEiLCJnbCIsIlVpbnQ4QXJyYXkiLCJyZWFkUGl4ZWxzIiwiUkdCQSIsIlVOU0lHTkVEX0JZVEUiLCJ0b0ltYWdlRGF0YSIsInRvUG5nIiwidG9KcGVnIiwiY29tcHJlc3NTeW5jIiwiZm9ybWF0IiwiRk9STUFUX1JHQkEiLCJxdWFsaXR5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7QUFDQTs7Ozs7O0FBQ0EsSUFBTUEsTUFBTSxnQkFBTUEsR0FBbEI7O0FBRUEsU0FBU0MsY0FBVCxDQUF5QkMsU0FBekIsRUFBb0M7QUFDbEMsTUFBTUMsUUFBUUQsVUFBVUMsS0FBeEI7QUFDQSxNQUFNQyxTQUFTRixVQUFVRSxNQUF6QjtBQUNBLE1BQU1DLFNBQVNILFVBQVVJLElBQXpCO0FBQ0EsTUFBTUMsTUFBTSxJQUFJUCxHQUFKLENBQVEsRUFBRUcsWUFBRixFQUFTQyxjQUFULEVBQVIsQ0FBWjtBQUNBLE9BQUssSUFBSUksSUFBSSxDQUFiLEVBQWdCQSxJQUFJSCxPQUFPSSxNQUEzQixFQUFtQ0QsS0FBSyxDQUF4QyxFQUEyQztBQUN6Q0QsUUFBSUQsSUFBSixDQUFTRSxDQUFULElBQWNILE9BQU9HLENBQVAsQ0FBZDtBQUNEO0FBQ0QsU0FBT1IsSUFBSVUsSUFBSixDQUFTQyxLQUFULENBQWVKLEdBQWYsQ0FBUDtBQUNEOztBQUVELFNBQVNLLE1BQVQsQ0FBaUJDLEVBQWpCLEVBQXFCVixLQUFyQixFQUE0QkMsTUFBNUIsRUFBb0M7QUFDbEMsTUFBSUUsT0FBTyxJQUFYO0FBQ0EsU0FBTyxZQUFZO0FBQ2pCLFFBQUksQ0FBQ0EsSUFBTCxFQUFXO0FBQ1RBLGFBQU8sSUFBSVEsVUFBSixDQUFlLElBQUlYLEtBQUosR0FBWUMsTUFBM0IsQ0FBUDtBQUNEO0FBQ0RTLE9BQUdFLFVBQUgsQ0FBYyxDQUFkLEVBQWlCLENBQWpCLEVBQW9CWixLQUFwQixFQUEyQkMsTUFBM0IsRUFBbUNTLEdBQUdHLElBQXRDLEVBQTRDSCxHQUFHSSxhQUEvQyxFQUE4RFgsSUFBOUQ7QUFDQSxXQUFPQSxJQUFQO0FBQ0QsR0FORDtBQU9EOztBQUVELFNBQVNZLFdBQVQsQ0FBc0JMLEVBQXRCLEVBQTBCVixLQUExQixFQUFpQ0MsTUFBakMsRUFBeUM7QUFDdkMsTUFBTUUsT0FBT00sT0FBT0MsRUFBUCxFQUFXVixLQUFYLEVBQWtCQyxNQUFsQixDQUFiO0FBQ0EsU0FBTztBQUNMRSxVQUFNQSxJQUREO0FBRUxILFdBQU9BLEtBRkY7QUFHTEMsWUFBUUE7QUFISCxHQUFQO0FBS0Q7O0FBRUQsU0FBU2UsS0FBVCxDQUFnQk4sRUFBaEIsRUFBb0JWLEtBQXBCLEVBQTJCQyxNQUEzQixFQUFtQztBQUNqQyxTQUFPSCxlQUFlaUIsWUFBWUwsRUFBWixFQUFnQlYsS0FBaEIsRUFBdUJDLE1BQXZCLENBQWYsQ0FBUDtBQUNEOztBQUVELFNBQVNnQixNQUFULENBQWlCZixNQUFqQixFQUF5QkYsS0FBekIsRUFBZ0NDLE1BQWhDLEVBQXdDO0FBQ3RDLFNBQU8sb0JBQUtpQixZQUFMLENBQ0xoQixNQURLLEVBRUw7QUFDRWlCLFlBQVEsb0JBQUtDLFdBRGY7QUFFRXBCLGdCQUZGO0FBR0VDLGtCQUhGO0FBSUVvQixhQUFTO0FBSlgsR0FGSyxDQUFQO0FBU0Q7O1FBR0NaLE0sR0FBQUEsTTtRQUNBTSxXLEdBQUFBLFc7UUFDQUMsSyxHQUFBQSxLO1FBQ0FDLE0sR0FBQUEsTSIsImZpbGUiOiJnbC10by5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwbmdqcyBmcm9tICdwbmdqcydcbmltcG9ydCBqcGVnIGZyb20gJ2pwZWctdHVyYm8nXG5jb25zdCBQTkcgPSBwbmdqcy5QTkdcblxuZnVuY3Rpb24gaW1hZ2VEYXRhVG9QbmcgKGltYWdlRGF0YSkge1xuICBjb25zdCB3aWR0aCA9IGltYWdlRGF0YS53aWR0aFxuICBjb25zdCBoZWlnaHQgPSBpbWFnZURhdGEuaGVpZ2h0XG4gIGNvbnN0IHBpeGVscyA9IGltYWdlRGF0YS5kYXRhXG4gIGNvbnN0IHBuZyA9IG5ldyBQTkcoeyB3aWR0aCwgaGVpZ2h0IH0pXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcGl4ZWxzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgcG5nLmRhdGFbaV0gPSBwaXhlbHNbaV1cbiAgfVxuICByZXR1cm4gUE5HLnN5bmMud3JpdGUocG5nKVxufVxuXG5mdW5jdGlvbiB0b1JnYmEgKGdsLCB3aWR0aCwgaGVpZ2h0KSB7XG4gIHZhciBkYXRhID0gbnVsbFxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghZGF0YSkge1xuICAgICAgZGF0YSA9IG5ldyBVaW50OEFycmF5KDQgKiB3aWR0aCAqIGhlaWdodClcbiAgICB9XG4gICAgZ2wucmVhZFBpeGVscygwLCAwLCB3aWR0aCwgaGVpZ2h0LCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBkYXRhKVxuICAgIHJldHVybiBkYXRhXG4gIH1cbn1cblxuZnVuY3Rpb24gdG9JbWFnZURhdGEgKGdsLCB3aWR0aCwgaGVpZ2h0KSB7XG4gIGNvbnN0IGRhdGEgPSB0b1JnYmEoZ2wsIHdpZHRoLCBoZWlnaHQpXG4gIHJldHVybiB7XG4gICAgZGF0YTogZGF0YSxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHRcbiAgfVxufVxuXG5mdW5jdGlvbiB0b1BuZyAoZ2wsIHdpZHRoLCBoZWlnaHQpIHtcbiAgcmV0dXJuIGltYWdlRGF0YVRvUG5nKHRvSW1hZ2VEYXRhKGdsLCB3aWR0aCwgaGVpZ2h0KSlcbn1cblxuZnVuY3Rpb24gdG9KcGVnIChwaXhlbHMsIHdpZHRoLCBoZWlnaHQpIHtcbiAgcmV0dXJuIGpwZWcuY29tcHJlc3NTeW5jKFxuICAgIHBpeGVscyxcbiAgICB7XG4gICAgICBmb3JtYXQ6IGpwZWcuRk9STUFUX1JHQkEsXG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodCxcbiAgICAgIHF1YWxpdHk6IDk1XG4gICAgfVxuICApXG59XG5cbmV4cG9ydCB7XG4gIHRvUmdiYSxcbiAgdG9JbWFnZURhdGEsXG4gIHRvUG5nLFxuICB0b0pwZWdcbn1cbiJdfQ==